{"version":3,"sources":["api/restcountries.ts","stores/CountriesStore.ts","dictionary/dictionary.ts","stores/LanguageStore/LanguageStore.ts","stores/index.ts","utils/langLabel/langLabel.ts","components/SearchView/SearchView.type.ts","components/CountryView/CountryView.tsx","components/SearchView/SearchView.tsx","components/LanguageSelect/LanguageSelect.tsx","containers/Country/Country.tsx","containers/app/App.tsx","serviceWorker.ts","index.tsx"],"names":["url","getAllCountries","a","fetch","res","json","CountriesStore","getCountryList","isLoad","CountryList","setCountryList","this","countryList","observable","action","arr","key","selectedCountry","find","country","alpha3Code","langLabel","en","name","translation","Flag","Country","Population","Capital","Search","Borders","ru","fr","KEY_TO_LANG","DEFAULT_LANG","LanguageStore","defaultLangLabels","dictionary","saveLang","window","localStorage","getItem","setItem","currentLanguage","tmpLang","computed","lang","countriesStore","languageStore","store","id","label","currentLangLabels","Direction","CountryView","observer","props","renderBordersList","borders","length","setSelectedCountry","borderCountryList","map","onClick","className","flag","population","capital","bordersList","src","alt","React","Component","SearchViewStore","maxCount","list","value","resultList","filter","toUpperCase","includes","displayList","findIndex","activeItemKey","showList","direction","step","up","newIndex","activeItemIndex","down","SearchView","handlerReaction","undefined","toggleContainer","createRef","inputRef","timeOutId","onKeyAction","event","moveActiveItem","selectItem","current","blur","onChangeHandler","onChange","target","setValue","onFocusHandler","clearTimeout","onInputBlurHandler","setTimeout","setShowList","onInputFocusHandler","renderDisplayList","liClassNames","onElementClickHandler","bind","tabIndex","onMouseOver","onElementMouseOverHandler","setActiveItemKey","onListElementSelect","transaction","reaction","setList","ref","onFocus","onKeyUp","onBlur","placeholder","defaultProps","LanguageSelect","inject","setCurrentLanguage","optionList","Object","entries","style","paddingTop","App","render","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","document","getElementById","URL","process","href","origin","addEventListener","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.05179339.chunk.js","sourcesContent":["import {ICountry} from \"../type/common.type\";\r\n\r\nconst url = 'https://restcountries.eu/rest/v2';\r\n\r\n/**\r\n * Функция для получения списка стран\r\n */\r\nexport async function getAllCountries(): Promise<ICountry[]> {\r\n    const res = await fetch(`${url}/all`);\r\n    return res.json();\r\n}","import {ICountry} from \"../type/common.type\";\r\nimport {getAllCountries} from \"../api/restcountries\";\r\nimport {action, observable} from \"mobx\";\r\n\r\n/**\r\n * Store для хранения информации о странах\r\n */\r\nexport class CountriesStore {\r\n    @observable\r\n    public countryList: ICountry[];\r\n    @observable\r\n    public selectedCountry?: ICountry;\r\n    @observable\r\n    public isLoad: boolean = true;\r\n\r\n    public constructor() {\r\n        this.countryList = [];\r\n    }\r\n\r\n    /**\r\n     * Метод для получения списка стран\r\n     */\r\n    public getCountryList = async () => {\r\n        try {\r\n            this.isLoad = false;\r\n            const CountryList = await getAllCountries();\r\n            this.setCountryList(CountryList);\r\n        } finally {\r\n            this.isLoad = true;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Метод для задания списка стран\r\n     *\r\n     * @param {ICountry[]} arr - список стран\r\n     */\r\n    @action\r\n    public setCountryList = (arr: ICountry[]) => {\r\n        this.countryList = arr;\r\n    };\r\n\r\n    /**\r\n     * Метод для задания ключа выбранной страны\r\n     *\r\n     * @param {string} key - ключ выбранной страны\r\n     */\r\n    @action\r\n    public setSelectedCountry = (key: string) => {\r\n        this.selectedCountry = this.countryList.find(country => country.alpha3Code === key);\r\n    };\r\n}","import {IDictionary} from '../type/common.type';\r\n\r\nexport const langLabel: IDictionary = {\r\n\ten: {\r\n\t\tname: 'English',\r\n\t\ttranslation: {\r\n\t\t\tFlag: 'Flag',\r\n\t\t\tCountry: 'Country',\r\n\t\t\tPopulation: 'Population',\r\n\t\t\tCapital: 'Capital',\r\n\t\t\tSearch: 'Search',\r\n\t\t\tBorders: 'Borders',\r\n\t\t}\r\n\t},\r\n\tru: {\r\n\t\tname: 'Русский',\r\n\t\ttranslation: {\r\n\t\t\tFlag: 'Флаг',\r\n\t\t\tCountry: 'Страна',\r\n\t\t\tPopulation: 'Население',\r\n\t\t\tCapital: 'Столица',\r\n\t\t\tSearch: 'Поиск',\r\n\t\t\tBorders: 'Граница',\r\n\t\t}\r\n\t},\r\n\tfr: {\r\n\t\tname: 'Française',\r\n\t\t'translation': {\r\n\t\t\tFlag: 'Drapeau',\r\n\t\t\tCountry: 'Pays',\r\n\t\t\tPopulation: 'Population',\r\n\t\t\tCapital: 'Capitale',\r\n\t\t\tSearch: 'Chercher',\r\n\t\t}\r\n\t}\r\n};","import {action, computed, observable} from 'mobx';\r\nimport {IDictionary, ILangLabels} from '../../type/common.type';\r\nimport {langLabel} from '../../dictionary/dictionary';\r\n\r\n// Ключ для хранения выбранного языка в localStorage\r\nexport const KEY_TO_LANG = 'lang';\r\n// Язык по умолчанию\r\nexport const DEFAULT_LANG = 'en';\r\n\r\n/**\r\n * Store для хранения информации о языке интерфейса\r\n */\r\nexport class LanguageStore  {\r\n\t@observable\r\n\tpublic currentLanguage: keyof IDictionary;\r\n\r\n\tpublic defaultLangLabels: ILangLabels;\r\n\tpublic dictionary: IDictionary;\r\n\r\n\tpublic constructor() {\r\n\t\tlet saveLang = window.localStorage.getItem(KEY_TO_LANG) as keyof IDictionary | null;\r\n\t\tif (!saveLang) {\r\n\t\t\tsaveLang = DEFAULT_LANG;\r\n\t\t\twindow.localStorage.setItem(KEY_TO_LANG, saveLang);\r\n\t\t}\r\n\t\tthis.currentLanguage = saveLang;\r\n\t\tthis.defaultLangLabels = langLabel[DEFAULT_LANG];\r\n\t\tthis.dictionary = langLabel;\r\n\t}\r\n\r\n\t@computed\r\n\tget currentLangLabels(): ILangLabels {\r\n\t\tconst tmpLang = langLabel[this.currentLanguage];\r\n\t\treturn tmpLang ? tmpLang : {translation: {}, name: ''};\r\n\t}\r\n\r\n\t/**\r\n\t * Метод для задания языка интерфейса\r\n\t *\r\n\t * @param {keyof IDictionary} lang - язык\r\n\t */\r\n\t@action\r\n\tpublic setCurrentLanguage = (lang: keyof IDictionary) => {\r\n\t\tthis.currentLanguage = lang;\r\n\t\twindow.localStorage.setItem(KEY_TO_LANG, this.currentLanguage);\r\n\t};\r\n}\r\n","import {CountriesStore} from './CountriesStore';\r\nimport {LanguageStore} from './LanguageStore/LanguageStore';\r\n\r\nexport const countriesStore = new CountriesStore();\r\nexport const languageStore = new LanguageStore();\r\n\r\nexport const store = {\r\n    countriesStore,\r\n    languageStore,\r\n};\r\n\r\n","import {languageStore} from '../../stores';\r\n\r\n/**\r\n * Функция для получения подписи на текущем языке\r\n *\r\n * @param {string} id - id подписи\r\n */\r\nexport function langLabel(id: string) {\r\n\tconst currentLangLabels = languageStore.currentLangLabels;\r\n\tlet label = currentLangLabels.translation[id];\r\n\tlabel = label ? label : languageStore.defaultLangLabels.translation[id];\r\n\treturn label ? label : '';\r\n}","import {IKeyValue} from \"../../type/common.type\";\r\n\r\nexport interface ISearchViewProps {\r\n    list: IKeyValue[];\r\n    label?: string;\r\n    maxCount?: number;\r\n    onChange?: (value: string) => void;\r\n    onListElementSelect?: (value: string) => void;\r\n}\r\n\r\nexport enum Direction {\r\n    up,\r\n    down\r\n}","import React from \"react\";\r\nimport {langLabel} from '../../utils/langLabel/langLabel';\r\nimport {ICountryViewProps} from \"./CountryView.type\";\r\nimport {observer} from \"mobx-react\";\r\nimport './CountryView.css';\r\n\r\n/**\r\n * Компонент для отображения карточки страны\r\n */\r\n@observer\r\nexport class CountryView extends React.Component<ICountryViewProps> {\r\n    public constructor(props: ICountryViewProps) {\r\n        super(props);\r\n    }\r\n\r\n    public render() {\r\n        const {\r\n            name,\r\n            flag,\r\n            population,\r\n            capital,\r\n            borders,\r\n        } = this.props;\r\n\r\n        const bordersList = this.renderBordersList(borders);\r\n        return (\r\n            <section className=\"country-info\">\r\n                {flag &&\r\n                <img src={flag} alt={langLabel('Flag')} className=\"country-info__flag\"/>\r\n                }\r\n                <div className=\"country-info__description-container\">\r\n                    {name && <div>\r\n                        {langLabel('Country')}: {name}\r\n                    </div>}\r\n                    {capital &&\r\n                    <div>\r\n                        {langLabel('Capital')}: {capital}\r\n                    </div>}\r\n                    {population &&\r\n                    <div>\r\n                        {langLabel('Population')}: {population}\r\n                    </div>}\r\n                    {bordersList}\r\n                </div>\r\n            </section>\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Метод для рендера списка граничных стран\r\n     *\r\n     * @param {string[]} borders - массив с кода граничных стран\r\n     */\r\n    private renderBordersList = (borders?: string[]) => {\r\n        if (borders && borders.length > 0) {\r\n            const {countryList, setSelectedCountry} = this.props;\r\n            const borderCountryList = borders.map(key => {\r\n                const country = countryList.find(({alpha3Code}) => alpha3Code === key);\r\n                return <li\r\n                    key={key}\r\n                    onClick={() => setSelectedCountry(key)}\r\n                    className=\"country-info__borders-list-item\"\r\n                >\r\n                    {country ? country.name : key}\r\n                </li>\r\n            });\r\n            return <div>\r\n                {langLabel('Borders')}:\r\n                <ul className=\"country-info__borders-list\">\r\n                    {borderCountryList}\r\n                </ul>\r\n            </div>\r\n        }\r\n        return null;\r\n    };\r\n}","import React, {ChangeEvent, KeyboardEvent} from \"react\";\r\nimport {Direction, ISearchViewProps} from \"./SearchView.type\";\r\nimport {observer} from \"mobx-react\";\r\nimport {action, computed, IReactionDisposer, observable, reaction, transaction} from 'mobx';\r\nimport {IKeyValue} from \"../../type/common.type\";\r\nimport './SearchView.css';\r\n\r\n/**\r\n * Store для компонента поиска\r\n */\r\nclass SearchViewStore {\r\n    // максимальное количество значений в выпадающем списке\r\n    private readonly maxCount: number = 10;\r\n\r\n    @observable\r\n    public showList: boolean = false;\r\n    @observable\r\n    public value: string = '';\r\n    @observable\r\n    public list: IKeyValue[] = [];\r\n    @observable\r\n    public activeItemKey: string = '';\r\n\r\n    @computed get displayList(): IKeyValue[] {\r\n        if (this.value === '') {\r\n            return [];\r\n        }\r\n\r\n        const resultList = this.list.filter(({value}) => value.toUpperCase().includes(this.value.toUpperCase()));\r\n        if (resultList.length > this.maxCount) {\r\n            resultList.length = this.maxCount;\r\n        }\r\n        return resultList;\r\n    }\r\n\r\n    @computed get activeItemIndex(): number {\r\n        return this.displayList.findIndex(({key}) => key === this.activeItemKey);\r\n    }\r\n\r\n    public constructor(props: ISearchViewProps) {\r\n        if (props.maxCount) {\r\n            this.maxCount = props.maxCount;\r\n        }\r\n        this.list = props.list;\r\n    }\r\n\r\n    /**\r\n     * Метод для задания видимости выпадающего списка\r\n     *\r\n     * @param {boolean} flag - флаг\r\n     */\r\n    @action\r\n    public setShowList = (flag: boolean) => {\r\n        this.showList = flag;\r\n        this.activeItemKey = '';\r\n    };\r\n\r\n    /**\r\n     * Метод для задания введенного значения\r\n     *\r\n     * @param {string} value - значение\r\n     */\r\n    @action\r\n    public setValue = (value: string) => {\r\n        this.value = value;\r\n        this.activeItemKey = '';\r\n    };\r\n\r\n    /**\r\n     * Метод для задания списка значений для выбора\r\n     *\r\n     * @param {IKeyValue[]} list - список значений для выбора\r\n     */\r\n    @action\r\n    public setList = (list: IKeyValue[]) => {\r\n        this.list = list;\r\n        this.activeItemKey = '';\r\n    };\r\n\r\n    /**\r\n     * Метод для задания выделенного значения из списка\r\n     *\r\n     * @param {string} key - ключ\r\n     */\r\n    @action\r\n    public setActiveItemKey = (key: string) => {\r\n        this.activeItemKey = key;\r\n    };\r\n\r\n    /**\r\n     * Метод для смещения указателя на выделенное значения\r\n     *\r\n     * @param {Direction} direction - направление смещения\r\n     */\r\n    @action\r\n    public moveActiveItem = (direction: Direction) => {\r\n        if (this.displayList.length > 0) {\r\n            const step = direction === Direction.up ? -1 : 1;\r\n            const newIndex = this.activeItemIndex !== -1\r\n                ? (this.activeItemIndex + step + this.displayList.length) % this.displayList.length\r\n                : direction === Direction.down ? 0 : this.displayList.length - 1 ;\r\n            this.activeItemKey = this.displayList[newIndex].key;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Компонент для поиска в списке значений\r\n */\r\n@observer\r\nexport class SearchView extends React.Component<ISearchViewProps> {\r\n    public static defaultProps = {\r\n        displayList: [],\r\n    };\r\n\r\n    private readonly store: SearchViewStore;\r\n    private handlerReaction?: IReactionDisposer = undefined;\r\n    private toggleContainer = React.createRef<HTMLDivElement>();\r\n    private inputRef = React.createRef<HTMLInputElement>();\r\n    private timeOutId?: number;\r\n\r\n    public constructor(props: ISearchViewProps) {\r\n        super(props);\r\n        this.store = new SearchViewStore(props);\r\n    }\r\n\r\n    public componentDidMount() {\r\n        this.handlerReaction = reaction(() => this.props.list,\r\n            list => {\r\n                this.store.setList(list);\r\n            });\r\n    }\r\n\r\n    public render () {\r\n        const {showList, value, displayList} = this.store;\r\n        const {label} = this.props;\r\n\r\n        const list = showList ? this.renderDisplayList(displayList) : null;\r\n        return (\r\n            <div className=\"search-view\"\r\n                 ref={this.toggleContainer}\r\n                 onFocus={this.onFocusHandler}\r\n                 onKeyUp={this.onKeyAction}\r\n            >\r\n                <div className=\"search-view__input-container\">\r\n                    <input\r\n                        className=\"search-view__input\"\r\n                        ref={this.inputRef}\r\n                        value={value}\r\n                        onChange={this.onChangeHandler}\r\n                        onFocus={this.onInputFocusHandler}\r\n                        onBlur={this.onInputBlurHandler}\r\n                        placeholder={label}\r\n                    />\r\n                    {showList && list}\r\n                </div>\r\n            </div>)\r\n    }\r\n\r\n    /**\r\n     * Метод для обработки нажатия клавиш\r\n     *\r\n     * @param {KeyboardEvent<HTMLInputElement>} event - событие\r\n     */\r\n    private onKeyAction = (event: KeyboardEvent<HTMLInputElement>) => {\r\n        const {moveActiveItem} = this.store;\r\n        switch (event.key) {\r\n            case 'ArrowDown':\r\n                moveActiveItem(Direction.down);\r\n                break;\r\n            case 'ArrowUp':\r\n                moveActiveItem(Direction.up);\r\n                break;\r\n            case 'Enter':\r\n                if (this.store.activeItemKey !== '') {\r\n                    this.selectItem(this.store.activeItemKey);\r\n                    if (this.inputRef.current) {\r\n                        this.inputRef.current.blur();\r\n                    }\r\n                }\r\n                break;\r\n            case 'Escape':\r\n                if (this.inputRef.current) {\r\n                    this.inputRef.current.blur();\r\n                }\r\n                break;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Метод для обработки вводы значения в input\r\n     *\r\n     * @param {ChangeEvent<HTMLInputElement>} event - событие\r\n     */\r\n    private onChangeHandler = (event: ChangeEvent<HTMLInputElement>) => {\r\n        const {onChange} = this.props;\r\n        const value = event.target.value ? event.target.value : '';\r\n        this.store.setValue(value);\r\n        if (onChange) {\r\n            onChange(value);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Метод для обработки установки фокуса на компоненте SearchView\r\n     */\r\n    private onFocusHandler = () => {\r\n        clearTimeout(this.timeOutId);\r\n    };\r\n\r\n    /**\r\n     * Метод для обработки потери фокуса input-ом\r\n     */\r\n    private onInputBlurHandler = () => {\r\n        this.timeOutId = setTimeout(() => {\r\n            if (this.store.showList) {\r\n                this.store.setShowList(false);\r\n            }\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Метод для обработки установки фокуса на input\r\n     */\r\n    private onInputFocusHandler = () => {\r\n        this.store.setShowList(true);\r\n    };\r\n\r\n    /**\r\n     * Метод для рендера выпадающего списка\r\n     *\r\n     * @param {IKeyValue[]} displayList - значения для выпадающего списка\r\n     */\r\n    private renderDisplayList = (displayList: IKeyValue[]) => {\r\n        if (displayList.length > 0) {\r\n            return (<ul className=\"search-view__dropdown-list\">\r\n                {\r\n                displayList.map(({key, value}) => {\r\n                    let liClassNames = 'search-view__li';\r\n                    if (key === this.store.activeItemKey) {\r\n                        liClassNames += ' search-view__li_active';\r\n                    }\r\n                    return <li\r\n                        key={key}\r\n                        onClick={this.onElementClickHandler.bind(this, key)}\r\n                        tabIndex={-1}\r\n                        className={liClassNames}\r\n                        onMouseOver={this.onElementMouseOverHandler.bind(this, key)}\r\n                    >\r\n                        {value}\r\n                    </li>\r\n                })}\r\n            </ul>);\r\n        }\r\n        return null;\r\n    };\r\n\r\n    /**\r\n     * Метод для обработки наведения курсора на элемент списка\r\n     *\r\n     * @param {string} key - ключ элемента\r\n     */\r\n    private onElementMouseOverHandler = (key: string) => {\r\n        this.store.setActiveItemKey(key);\r\n    };\r\n\r\n    /**\r\n     * Метод для обработки нажатия на элимент списка\r\n     *\r\n     * @param {string} key - ключ элимента\r\n     */\r\n    private onElementClickHandler = (key: string) => {\r\n        this.selectItem(key);\r\n    };\r\n\r\n    /**\r\n     * Методя для обработки выбора элемента\r\n     *\r\n     * @param {string} key - ключ элемента\r\n     */\r\n    private selectItem = (key : string) => {\r\n        const {onListElementSelect} = this.props;\r\n\r\n        transaction(() => {\r\n            this.store.setShowList(false);\r\n            this.store.setValue('');\r\n        });\r\n        if (onListElementSelect) {\r\n            onListElementSelect(key);\r\n        }\r\n    };\r\n}","import React from \"react\";\r\nimport {IDictionary} from \"../../type/common.type\";\r\nimport {inject, observer} from \"mobx-react\";\r\nimport {LanguageStore} from \"../../stores/LanguageStore/LanguageStore\";\r\n\r\n/**\r\n * Компонент для выбора языка интерфейса\r\n */\r\nexport const LanguageSelect = inject('languageStore') (observer((props: {languageStore?: LanguageStore}) => {\r\n    const {setCurrentLanguage, currentLanguage, dictionary} = props.languageStore!;\r\n    const optionList = Object.entries(dictionary).map(([key, value]) => {\r\n        return <option\r\n            value={key}\r\n            key={key}\r\n        >\r\n            {value.name}\r\n        </option>\r\n    });\r\n\r\n    return <select\r\n        value={currentLanguage}\r\n        onChange={(event) => {setCurrentLanguage(event.target.value as keyof IDictionary);}}\r\n    >\r\n        {optionList}\r\n    </select>\r\n}));","import React from 'react';\r\nimport {inject, observer} from \"mobx-react\";\r\nimport {CountryView} from \"../../components\";\r\nimport {langLabel} from '../../utils/langLabel/langLabel';\r\nimport {ICountryProps} from \"./Country.type\";\r\nimport {SearchView} from \"../../components\";\r\nimport {LanguageSelect} from '../../components';\r\nimport './Country.css';\r\n\r\n/**\r\n * Компонент для отображения строки поиска и карточки страны\r\n */\r\n@inject('countriesStore')\r\n@observer\r\nexport class Country extends React.Component<ICountryProps> {\r\n    public constructor(props: ICountryProps) {\r\n        super(props);\r\n    }\r\n\r\n    public componentDidMount(): void {\r\n        const {getCountryList} = this.props.countriesStore!;\r\n        getCountryList();\r\n    }\r\n\r\n    public render() {\r\n        const {countryList, selectedCountry, setSelectedCountry, isLoad} = this.props.countriesStore!;\r\n        if (!isLoad) {\r\n            return <div style={{paddingTop: '20px'}}>Загрузка</div>;\r\n        }\r\n        return <div className=\"country\">\r\n            <div className=\"country__bar\">\r\n                <div className=\"country__search\">\r\n                    <SearchView\r\n                        list={countryList.map(({name, alpha3Code}) => {return {key: alpha3Code, value: name}})}\r\n                        onListElementSelect={setSelectedCountry}\r\n                        label={langLabel('Search')}\r\n                    />\r\n                </div>\r\n                <div className=\"country__lang\">\r\n                    <LanguageSelect/>\r\n                </div>\r\n            </div>\r\n            <div className=\"country__info\">\r\n                {selectedCountry &&\r\n                <CountryView {...selectedCountry}\r\n                             setSelectedCountry={setSelectedCountry}\r\n                             countryList={countryList}\r\n                />}\r\n            </div>\r\n        </div>;\r\n    }\r\n}\r\n","import React from 'react';\r\nimport './App.css';\r\nimport {IAppProps} from \"./App.type.\";\r\nimport {Country} from \"../Country/Country\";\r\n\r\nclass App extends React.Component<IAppProps> {\r\n  public constructor(props: IAppProps) {\r\n    super(props);\r\n  }\r\n\r\n  public render = () => {\r\n    return <main className=\"main-container\">\r\n      <Country/>\r\n    </main>\r\n  };\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './containers/app/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from \"mobx-react\";\r\nimport {store} from \"./stores\";\r\n\r\nReactDOM.render(\r\n    <Provider {...store}>\r\n        <App/>\r\n    </Provider>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}