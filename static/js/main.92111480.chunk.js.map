{"version":3,"sources":["api/restcountries.ts","stores/CountriesStore.ts","dictionary/dictionary.ts","stores/LanguageStore.ts","stores/index.ts","utils/langLabel.ts","components/CountryView/CountryView.tsx","components/SearchView/SearchView.tsx","components/LanguageSelect/LanguageSelect.tsx","containers/Country/Country.tsx","containers/app/App.tsx","serviceWorker.ts","index.tsx"],"names":["url","getAllCountries","a","fetch","res","json","CountriesStore","getCountryList","isLoad","CountryList","setCountryList","this","countryList","observable","action","arr","key","selectedCountry","find","country","alpha3Code","langLabel","en","translation","Flag","Country","Population","Capital","Search","Borders","ru","fr","KEY_TO_LANG","DEFAULT_LANG","LanguageStore","defaultLangLabels","dictionary","setLangToLocalStorage","autorun","currentLanguage","window","localStorage","setItem","saveLang","getItem","tmpLang","computed","lang","countriesStore","languageStore","store","id","label","currentLangLabels","CountryView","observer","props","renderBordersList","borders","length","setSelectedCountry","borderCountryList","map","onClick","name","className","flag","population","capital","bordersList","src","alt","React","Component","SearchViewStore","maxCount","list","value","searchValue","toUpperCase","resultList","filter","includes","displayList","findIndex","activeItemKey","showList","directions","newIndex","activeItemIndex","SearchView","handlerReaction","undefined","toggleContainer","createRef","inputRef","timeOutId","onKeyAction","event","moveActiveItem","selectElement","current","blur","onChange","target","setValue","renderDisplayList","liClassNames","onElementClickHandler","bind","tabIndex","onMouseOver","onElementMouseOverHandler","setActiveItemKey","onInputFocusHandler","setShowList","onFocusHandler","clearTimeout","transaction","onListElementSelect","onBlurHandler","setTimeout","reaction","setList","ref","onFocus","onKeyUp","onBlur","placeholder","defaultProps","LanguageSelect","setCurrentLanguage","optionList","Object","entries","inject","style","paddingTop","App","render","Boolean","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2YAEMA,G,MAAM,oCAEL,SAAeC,IAAtB,+B,4CAAO,4BAAAC,EAAA,sEACeC,MAAM,GAAD,OAAIH,EAAJ,SADpB,cACGI,EADH,yBAEIA,EAAIC,QAFR,4C,mDCAMC,GAAb,EAQI,aAAsB,IAAD,oJAIdC,eAJc,sBAIG,4BAAAL,EAAA,sEAEhB,EAAKM,QAAS,EAFE,SAGUP,IAHV,OAGVQ,EAHU,OAIhB,EAAKC,eAAeD,GAJJ,uBAMhB,EAAKD,QAAS,EANE,uEAJH,wFACjBG,KAAKC,YAAc,IAT3B,yCACKC,KADL,2GAGKA,KAHL,kGAKKA,KALL,yEAM6B,KAN7B,4CAsBKC,KAtBL,oFAuB4B,SAACC,GACrB,EAAKH,YAAcG,MAxB3B,gDA2BKD,KA3BL,oFA4BgC,SAACE,GACzB,EAAKC,gBAAkB,EAAKL,YAAYM,MAAK,SAAAC,GAAO,OAAIA,EAAQC,aAAeJ,SA7BvF,GCFaK,EAAyB,CACrCC,GAAI,CACHC,YAAa,CACZC,KAAM,OACNC,QAAS,UACTC,WAAY,aACZC,QAAS,UACTC,OAAQ,SACRC,QAAS,YAGXC,GAAI,CACH,YAAe,CACdN,KAAM,2BACNC,QAAS,uCACTC,WAAY,yDACZC,QAAS,6CACTC,OAAQ,mCAGVG,GAAI,CACH,YAAe,CACdP,KAAM,UACNC,QAAS,OACTC,WAAY,aACZC,QAAS,WACTC,OAAQ,cCxBLI,EAAc,OACdC,EAAe,KAGRC,GAAb,aAMC,aAAsB,IAAD,2EAHdC,uBAGc,OAFdC,gBAEc,qDAsBbC,sBAAwBC,aAAQ,WACnC,EAAKC,iBACRC,OAAOC,aAAaC,QAAQV,EAAa,EAAKO,oBAvB/C,IAAII,EAAWH,OAAOC,aAAaG,QAAQZ,GACtCW,IACJA,EAAWV,EACXO,OAAOC,aAAaC,QAAQV,EAAaW,IAE1ChC,KAAK4B,gBAAkBI,EACvBhC,KAAKwB,kBAAoBd,EAAUY,GACnCtB,KAAKyB,WAAaf,EAdpB,8DAmBE,IAAMwB,EAAUxB,EAAUV,KAAK4B,iBAC/B,OAAOM,GAAoB,CAACtB,YAAa,QApB3C,kDACEV,KADF,2GAiBEiC,KAjBF,8HAuBEhC,KAvBF,oFAwB6B,SAACiC,GAC5B,EAAKR,gBAAkBQ,MAzBzB,GCLaC,EAAiB,IAAI1C,EACrB2C,EAAgB,IAAIf,EAEpBgB,EAAQ,CACjBF,iBACAC,iBCNG,SAAS5B,EAAU8B,GACzB,IACIC,EADsBH,EAAcI,kBACV9B,YAAY4B,GAE1C,OADAC,EAAQA,GAAgBH,EAAcd,kBAAkBZ,YAAY4B,KAC7C,G,yCCCXG,GADZC,YACD,cACI,WAAmBC,GAA2B,IAAD,8BACzC,4CAAMA,KAoCFC,kBAAoB,SAACC,GACzB,GAAIA,GAAWA,EAAQC,OAAS,EAAG,CAAC,IAAD,EACW,EAAKH,MAAxC5C,EADwB,EACxBA,YAAagD,EADW,EACXA,mBACdC,EAAoBH,EAAQI,KAAI,SAAA9C,GAClC,IAAMG,EAAUP,EAAYM,MAAK,qBAAEE,aAA+BJ,KAClE,OAAO,wBAAIA,IAAKA,EAAK+C,QAAS,kBAAMH,EAAmB5C,KAClDG,EAAUA,EAAQ6C,KAAOhD,MAGlC,OAAO,6BACFK,EAAU,WACX,wBAAI4C,UAAU,8BACTJ,IAIb,OAAO,MArDkC,EADjD,sEAKqB,IAAD,EAORlD,KAAK6C,MALLQ,EAFQ,EAERA,KACAE,EAHQ,EAGRA,KACAC,EAJQ,EAIRA,WACAC,EALQ,EAKRA,QACAV,EANQ,EAMRA,QAGEW,EAAc1D,KAAK8C,kBAAkBC,GAC3C,OACI,6BAASO,UAAU,gBACdC,GACD,yBAAKI,IAAKJ,EAAMK,IAAKlD,EAAU,QAAS4C,UAAU,uBAElD,yBAAKA,UAAU,uCACVD,GAAQ,6BACJ3C,EAAU,WADN,KACoB2C,GAE5BI,GACD,6BACK/C,EAAU,WADf,KAC6B+C,GAE5BD,GACD,6BACK9C,EAAU,cADf,KACgC8C,GAE/BE,QAhCrB,GAAiCG,IAAMC,aAAvC,E,SCAMC,I,mBA4BF,WAAmBlB,GAA0B,yBA3B5BmB,SAAmB,GA2BQ,kVACpCnB,EAAMmB,WACNhE,KAAKgE,SAAWnB,EAAMmB,UAE1BhE,KAAKiE,KAAOpB,EAAMoB,K,wDAnBlB,GAAmB,KAAfjE,KAAKkE,MACL,MAAO,GAEX,IAAMC,EAAcnE,KAAKkE,MAAME,cACzBC,EAAarE,KAAKiE,KAAKK,QAAO,qBAAEJ,MAAiBE,cAAcG,SAASJ,MAI9E,OAHIE,EAAWrB,OAAShD,KAAKgE,WACzBK,EAAWrB,OAAShD,KAAKgE,UAEtBK,I,sCAG8B,IAAD,OACpC,OAAOrE,KAAKwE,YAAYC,WAAU,qBAAEpE,MAAiB,EAAKqE,qB,2CAtB7DxE,K,yEAC0B,K,mCAC1BA,K,wEACsB,M,kCACtBA,K,wEAC0B,M,2CAC1BA,K,wEAC8B,M,uCAE9BiC,K,mHAYAA,K,qHAWAhC,K,oFACoB,SAACoD,GAClB,EAAKoB,SAAWpB,EAChB,EAAKmB,cAAgB,O,sCAGxBvE,K,oFACiB,SAAC+D,GACf,EAAKA,MAAQA,EACb,EAAKQ,cAAgB,O,qCAGxBvE,K,oFACgB,SAAC8D,GACd,EAAKA,KAAOA,EACZ,EAAKS,cAAgB,O,8CAGxBvE,K,oFACyB,SAACE,GACvB,EAAKqE,cAAgBrE,M,4CAGxBF,K,oFACuB,SAACyE,GACrB,GAAI,EAAKJ,YAAYxB,OAAS,EAAG,CAC7B,IAAM6B,GAAqC,IAA1B,EAAKC,iBACf,EAAKA,gBAAkBF,EAAa,EAAKJ,YAAYxB,QAAU,EAAKwB,YAAYxB,OAClE,IAAf4B,EAAmB,EAAI,EAAKJ,YAAYxB,OAAQ,EACtD,EAAK0B,cAAgB,EAAKF,YAAYK,GAAUxE,S,GAM/C0E,GADZnC,aACD,gBAWI,WAAmBC,GAA0B,IAAD,8BACxC,4CAAMA,KAPON,WAM2B,IALpCyC,qBAAsCC,EAKF,EAJpCC,gBAAkBrB,IAAMsB,YAIY,EAHpCC,SAAWvB,IAAMsB,YAGmB,EAFpCE,eAEoC,IAsCpCC,YAAc,SAACC,GAA4C,IACxDC,EAAkB,EAAKjD,MAAvBiD,eACP,OAAQD,EAAMlF,KACV,IAAK,YACDmF,EAAe,GACf,MACJ,IAAK,UACDA,GAAgB,GAChB,MACJ,IAAK,QACgC,KAA7B,EAAKjD,MAAMmC,gBACX,EAAKe,cAAc,EAAKlD,MAAMmC,eAC1B,EAAKU,SAASM,SACd,EAAKN,SAASM,QAAQC,QAG9B,MACJ,IAAK,SACG,EAAKP,SAASM,SACd,EAAKN,SAASM,QAAQC,SAzDM,EA+DpCC,SAAW,SAACL,GAChB,IAAMrB,EAAQqB,EAAMM,OAAO3B,MAAQqB,EAAMM,OAAO3B,MAAQ,GACjD0B,EAAY,EAAK/C,MAAjB+C,SACP,EAAKrD,MAAMuD,SAAS5B,GAChB0B,GACAA,EAAS1B,IApE2B,EAwEpC6B,kBAAoB,SAACvB,GACzB,OAAIA,EAAYxB,OAAS,EACb,wBAAIM,UAAU,8BAElBkB,EAAYrB,KAAI,YAAmB,IAAjB9C,EAAgB,EAAhBA,IAAK6D,EAAW,EAAXA,MACf8B,EAAe,kBAInB,OAHI3F,IAAQ,EAAKkC,MAAMmC,gBACnBsB,GAAgB,2BAEb,wBACH3F,IAAKA,EACL+C,QAAS,EAAK6C,sBAAsBC,KAA3B,gBAAsC7F,GAC/C8F,UAAW,EACX7C,UAAW0C,EACXI,YAAa,EAAKC,0BAA0BH,KAA/B,gBAA0C7F,IAEtD6D,OAKV,MA7FiC,EAgGpCmC,0BAA4B,SAAChG,GACjC,EAAKkC,MAAM+D,iBAAiBjG,IAjGY,EAoGpCkG,oBAAsB,WAC1B,EAAKhE,MAAMiE,aAAY,IArGiB,EAwGpCC,eAAiB,WACrBC,aAAa,EAAKrB,YAzGsB,EA4GpCY,sBAAwB,SAAC5F,GAC7B,EAAKoF,cAAcpF,IA7GqB,EAgHpCoF,cAAgB,SAACpF,GACrBsG,aAAY,WACR,EAAKpE,MAAMiE,aAAY,GACvB,EAAKjE,MAAMuD,SAAS,OAHc,IAK/Bc,EAAuB,EAAK/D,MAA5B+D,oBACHA,GACAA,EAAoBvG,IAvHgB,EA2HpCwG,cAAgB,WACpB,EAAKxB,UAAYyB,YAAW,WACpB,EAAKvE,MAAMoC,UACX,EAAKpC,MAAMiE,aAAY,OA5H/B,EAAKjE,MAAQ,IAAIwB,GAAgBlB,GAFO,EAXhD,iFAgBgC,IAAD,OACvB7C,KAAKgF,gBAAkB+B,aAAS,kBAAM,EAAKlE,MAAMoB,QAC7C,SAAAA,GACI,EAAK1B,MAAMyE,QAAQ/C,QAnBnC,+BAuBsB,IAAD,EAC0BjE,KAAKuC,MAArCoC,EADM,EACNA,SAAUT,EADJ,EACIA,MAAOM,EADX,EACWA,YACjB/B,EAASzC,KAAK6C,MAAdJ,MAEDwB,EAAOjE,KAAK+F,kBAAkBvB,GACpC,OACI,yBAAKlB,UAAU,cACV2D,IAAKjH,KAAKkF,gBACVgC,QAASlH,KAAKyG,eACdU,QAASnH,KAAKsF,aAEf,yBAAKhC,UAAU,gCACX,2BACIA,UAAU,qBACV2D,IAAKjH,KAAKoF,SACVlB,MAAOA,EACP0B,SAAU5F,KAAK4F,SACfsB,QAASlH,KAAKuG,oBACda,OAAQpH,KAAK6G,cACbQ,YAAa5E,IAEhBkC,GAAYV,QA5CjC,GAAgCJ,IAAMC,WAAtC,EACkBwD,aAAe,CACzB9C,YAAa,IAFrB,S,SCzEa+C,GAA0C,WAAO,IACnDC,EAAmDlF,EAAnDkF,mBAAoB5F,EAA+BU,EAA/BV,gBAAiBH,EAAca,EAAdb,WACtCgG,EAAaC,OAAOC,QAAQlG,GAAY0B,KAAI,YAAY,IAAV9C,EAAS,qBACzD,OAAO,4BAAQ6D,MAAO7D,EAAKA,IAAKA,GAAMA,MAG1C,OAAO,4BACH6D,MAAOtC,EACPgE,SACI,SAACL,GACGiC,EAAmBjC,EAAMM,OAAO3B,SAIvCuD,ICPI3G,I,MAFZ8G,YAAO,iBAER,IADChF,YACD,eACI,WAAmBC,GAAuB,qEAChCA,IAFd,kFAOQjD,EADyBI,KAAK6C,MAAMR,eAA7BzC,oBANf,+BAUqB,IAAD,EACuDI,KAAK6C,MAAMR,eAAvEpC,EADK,EACLA,YAAaK,EADR,EACQA,gBAAiB2C,EADzB,EACyBA,mBACrC,OAFY,EAC6CpD,OAIlD,yBAAKyD,UAAU,WAClB,yBAAKA,UAAU,gBACX,yBAAKA,UAAU,mBACX,kBAAC,GAAD,CACIW,KAAMhE,EAAYkD,KAAI,YAAyB,IAAvBE,EAAsB,EAAtBA,KAAuB,MAAO,CAAChD,IAAT,EAAhBI,WAA0CyD,MAAOb,MAC/EuD,oBAAqB3D,EACrBR,MAAO/B,EAAU,aAGzB,yBAAK4C,UAAU,iBACX,kBAAC,GAAD,QAGR,yBAAKA,UAAU,iBACVhD,GACD,kBAAC,GAAD,iBAAiBA,EAAjB,CACa2C,mBAAoBA,EACpBhD,YAAaA,OAnBvB,yBAAK4H,MAAO,CAACC,WAAY,SAAzB,wDAbnB,GAA6BjE,IAAMC,aAAnC,SCMeiE,G,YAXb,WAAmBlF,GAAmB,IAAD,8BACnC,4CAAMA,KAGDmF,OAAS,WACd,OAAO,0BAAM1E,UAAU,kBACrB,kBAAC,GAAD,QANiC,E,2BADrBO,IAAMC,WCOJmE,QACW,cAA7BpG,OAAOqG,SAASC,UAEe,UAA7BtG,OAAOqG,SAASC,UAEhBtG,OAAOqG,SAASC,SAASC,MACvB,2DCVNC,IAASL,OACL,kBAAC,IAAazF,EACV,kBAAC,GAAD,OAEJ+F,SAASC,eAAe,SD6HtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.92111480.chunk.js","sourcesContent":["import {ICountry} from \"../type/common.type\";\r\n\r\nconst url = 'https://restcountries.eu/rest/v2';\r\n\r\nexport async function getAllCountries(): Promise<ICountry[]> {\r\n    const res = await fetch(`${url}/all`);\r\n    return res.json();\r\n}","import {ICountry} from \"../type/common.type\";\r\nimport {getAllCountries} from \"../api/restcountries\";\r\nimport {action, observable} from \"mobx\";\r\n\r\nexport class CountriesStore {\r\n    @observable\r\n    public countryList: ICountry[];\r\n    @observable\r\n    public selectedCountry?: ICountry;\r\n    @observable\r\n    public isLoad: boolean = true;\r\n\r\n    public constructor() {\r\n        this.countryList = [];\r\n    }\r\n\r\n    public getCountryList = async () => {\r\n        try {\r\n            this.isLoad = false;\r\n            const CountryList = await getAllCountries();\r\n            this.setCountryList(CountryList);\r\n        } finally {\r\n            this.isLoad = true;\r\n        }\r\n    };\r\n\r\n    @action\r\n    public setCountryList = (arr: ICountry[]) => {\r\n        this.countryList = arr;\r\n    };\r\n\r\n    @action\r\n    public setSelectedCountry = (key: string) => {\r\n        this.selectedCountry = this.countryList.find(country => country.alpha3Code === key);\r\n    };\r\n}","import {IDictionary} from '../type/common.type';\r\n\r\nexport const langLabel: IDictionary = {\r\n\ten: {\r\n\t\ttranslation: {\r\n\t\t\tFlag: 'Flag',\r\n\t\t\tCountry: 'Country',\r\n\t\t\tPopulation: 'Population',\r\n\t\t\tCapital: 'Capital',\r\n\t\t\tSearch: 'Search',\r\n\t\t\tBorders: 'Borders',\r\n\t\t}\r\n\t},\r\n\tru: {\r\n\t\t'translation': {\r\n\t\t\tFlag: 'Флаг',\r\n\t\t\tCountry: 'Страна',\r\n\t\t\tPopulation: 'Население',\r\n\t\t\tCapital: 'Столица',\r\n\t\t\tSearch: 'Поиск',\r\n\t\t}\r\n\t},\r\n\tfr: {\r\n\t\t'translation': {\r\n\t\t\tFlag: 'Drapeau',\r\n\t\t\tCountry: 'Pays',\r\n\t\t\tPopulation: 'Population',\r\n\t\t\tCapital: 'Capitale',\r\n\t\t\tSearch: 'Chercher',\r\n\t\t}\r\n\t}\r\n};","import {action, autorun, computed, observable} from 'mobx';\r\nimport {IDictionary, ILangLabels} from '../type/common.type';\r\nimport {langLabel} from '../dictionary/dictionary';\r\n\r\nconst KEY_TO_LANG = 'lang';\r\nconst DEFAULT_LANG = 'en';\r\n\r\n\r\nexport class LanguageStore  {\r\n\t@observable\r\n\tpublic currentLanguage: keyof IDictionary;\r\n\tpublic defaultLangLabels: ILangLabels;\r\n\tpublic dictionary: IDictionary;\r\n\r\n\tpublic constructor() {\r\n\t\tlet saveLang = window.localStorage.getItem(KEY_TO_LANG) as keyof IDictionary | null;\r\n\t\tif (!saveLang) {\r\n\t\t\tsaveLang = DEFAULT_LANG;\r\n\t\t\twindow.localStorage.setItem(KEY_TO_LANG, saveLang);\r\n\t\t}\r\n\t\tthis.currentLanguage = saveLang;\r\n\t\tthis.defaultLangLabels = langLabel[DEFAULT_LANG];\r\n\t\tthis.dictionary = langLabel;\r\n\t}\r\n\r\n\t@computed\r\n\tget currentLangLabels(): ILangLabels {\r\n\t\tconst tmpLang = langLabel[this.currentLanguage];\r\n\t\treturn tmpLang ? tmpLang : {translation: {}};\r\n\t}\r\n\r\n\t@action\r\n\tpublic setCurrentLanguage = (lang: keyof IDictionary) => {\r\n\t\tthis.currentLanguage = lang;\r\n\t};\r\n\r\n\tprivate setLangToLocalStorage = autorun(() => {\r\n\t\tif (this.currentLanguage) {\r\n\t\t\twindow.localStorage.setItem(KEY_TO_LANG, this.currentLanguage);\r\n\t\t}\r\n\t})\r\n}\r\n","import {CountriesStore} from './CountriesStore';\r\nimport {LanguageStore} from './LanguageStore';\r\n\r\nexport const countriesStore = new CountriesStore();\r\nexport const languageStore = new LanguageStore();\r\n\r\nexport const store = {\r\n    countriesStore,\r\n    languageStore,\r\n};\r\n\r\n","import {languageStore} from '../stores';\r\n\r\nexport function langLabel(id: string) {\r\n\tconst currentLangLabels = languageStore.currentLangLabels;\r\n\tlet label = currentLangLabels.translation[id];\r\n\tlabel = label ? label : languageStore.defaultLangLabels.translation[id];\r\n\treturn label ? label : '';\r\n}\r\n\r\n\r\n","import React from \"react\";\r\nimport {langLabel} from '../../utils/langLabel';\r\nimport {ICountryViewProps} from \"./CountryView.type\";\r\nimport {observer} from \"mobx-react\";\r\nimport './CountryView.css';\r\n\r\n@observer\r\nexport class CountryView extends React.Component<ICountryViewProps> {\r\n    public constructor(props: ICountryViewProps) {\r\n        super(props);\r\n    }\r\n\r\n    public render() {\r\n        const {\r\n            name,\r\n            flag,\r\n            population,\r\n            capital,\r\n            borders,\r\n        } = this.props;\r\n\r\n        const bordersList = this.renderBordersList(borders);\r\n        return (\r\n            <section className=\"country-info\">\r\n                {flag &&\r\n                <img src={flag} alt={langLabel('Flag')} className=\"country-info__flag\"/>\r\n                }\r\n                <div className=\"country-info__description-container\">\r\n                    {name && <div>\r\n                        {langLabel('Country')}: {name}\r\n                    </div>}\r\n                    {capital &&\r\n                    <div>\r\n                        {langLabel('Capital')}: {capital}\r\n                    </div>}\r\n                    {population &&\r\n                    <div>\r\n                        {langLabel('Population')}: {population}\r\n                    </div>}\r\n                    {bordersList}\r\n                </div>\r\n            </section>\r\n        );\r\n    }\r\n\r\n    private renderBordersList = (borders?: string[]) => {\r\n        if (borders && borders.length > 0) {\r\n            const {countryList, setSelectedCountry} = this.props;\r\n            const borderCountryList = borders.map(key => {\r\n                const country = countryList.find(({alpha3Code}) => alpha3Code === key);\r\n                return <li key={key} onClick={() => setSelectedCountry(key)}>\r\n                    {country ? country.name : key}\r\n                </li>\r\n            });\r\n            return <div>\r\n                {langLabel('Borders')}\r\n                <ul className=\"country-info__borders-list\">\r\n                    {borderCountryList}\r\n                </ul>\r\n            </div>\r\n        }\r\n        return null;\r\n    };\r\n}","import React, {ChangeEvent, KeyboardEvent} from \"react\";\r\nimport {ISearchViewProps} from \"./SearchView.type\";\r\nimport {observer} from \"mobx-react\";\r\nimport {action, computed, IReactionDisposer, observable, reaction, transaction} from 'mobx';\r\nimport {IKeyValue} from \"../../type/common.type\";\r\nimport './SearchView.css';\r\n\r\nclass SearchViewStore {\r\n    private readonly maxCount: number = 10;\r\n\r\n    @observable\r\n    public showList: boolean = false;\r\n    @observable\r\n    public value: string = '';\r\n    @observable\r\n    public list: IKeyValue[] = [];\r\n    @observable\r\n    public activeItemKey: string = '';\r\n\r\n    @computed get displayList(): IKeyValue[] {\r\n        if (this.value === '') {\r\n            return [];\r\n        }\r\n        const searchValue = this.value.toUpperCase();\r\n        const resultList = this.list.filter(({value}) => value.toUpperCase().includes(searchValue));\r\n        if (resultList.length > this.maxCount) {\r\n            resultList.length = this.maxCount;\r\n        }\r\n        return resultList;\r\n    }\r\n\r\n    @computed get activeItemIndex(): number {\r\n        return this.displayList.findIndex(({key}) => key === this.activeItemKey);\r\n    }\r\n\r\n    public constructor(props: ISearchViewProps) {\r\n        if (props.maxCount) {\r\n            this.maxCount = props.maxCount;\r\n        }\r\n        this.list = props.list;\r\n    }\r\n\r\n    @action\r\n    public setShowList = (flag: boolean) => {\r\n        this.showList = flag;\r\n        this.activeItemKey = '';\r\n    };\r\n\r\n    @action\r\n    public setValue = (value: string) => {\r\n        this.value = value;\r\n        this.activeItemKey = '';\r\n    };\r\n\r\n    @action\r\n    public setList = (list: IKeyValue[]) => {\r\n        this.list = list;\r\n        this.activeItemKey = '';\r\n    };\r\n\r\n    @action\r\n    public setActiveItemKey = (key: string) => {\r\n        this.activeItemKey = key;\r\n    };\r\n\r\n    @action\r\n    public moveActiveItem = (directions: number) => {\r\n        if (this.displayList.length > 0) {\r\n            const newIndex = this.activeItemIndex !== -1\r\n                ? (this.activeItemIndex + directions + this.displayList.length) % this.displayList.length\r\n                : directions === 1 ? 0 : this.displayList.length -1 ;\r\n            this.activeItemKey = this.displayList[newIndex].key;\r\n        }\r\n    }\r\n}\r\n\r\n@observer\r\nexport class SearchView extends React.Component<ISearchViewProps> {\r\n    public static defaultProps = {\r\n        displayList: [],\r\n    };\r\n\r\n    private readonly store: SearchViewStore;\r\n    private handlerReaction?: IReactionDisposer = undefined;\r\n    private toggleContainer = React.createRef<HTMLDivElement>();\r\n    private inputRef = React.createRef<HTMLInputElement>();\r\n    private timeOutId?: number;\r\n\r\n    public constructor(props: ISearchViewProps) {\r\n        super(props);\r\n        this.store = new SearchViewStore(props);\r\n    }\r\n\r\n    public componentDidMount() {\r\n        this.handlerReaction = reaction(() => this.props.list,\r\n            list => {\r\n                this.store.setList(list);\r\n            });\r\n    }\r\n\r\n    public render () {\r\n        const {showList, value, displayList} = this.store;\r\n        const {label} = this.props;\r\n\r\n        const list = this.renderDisplayList(displayList);\r\n        return (\r\n            <div className=\"search-view\"\r\n                 ref={this.toggleContainer}\r\n                 onFocus={this.onFocusHandler}\r\n                 onKeyUp={this.onKeyAction}\r\n            >\r\n                <div className=\"search-view__input-container\">\r\n                    <input\r\n                        className=\"search-view__input\"\r\n                        ref={this.inputRef}\r\n                        value={value}\r\n                        onChange={this.onChange}\r\n                        onFocus={this.onInputFocusHandler}\r\n                        onBlur={this.onBlurHandler}\r\n                        placeholder={label}\r\n                    />\r\n                    {showList && list}\r\n                </div>\r\n            </div>)\r\n    }\r\n\r\n    private onKeyAction = (event: KeyboardEvent<HTMLInputElement>) => {\r\n        const {moveActiveItem} = this.store;\r\n        switch (event.key) {\r\n            case 'ArrowDown':\r\n                moveActiveItem(1);\r\n                break;\r\n            case 'ArrowUp':\r\n                moveActiveItem(-1);\r\n                break;\r\n            case 'Enter':\r\n                if (this.store.activeItemKey !== '') {\r\n                    this.selectElement(this.store.activeItemKey);\r\n                    if (this.inputRef.current) {\r\n                        this.inputRef.current.blur();\r\n                    }\r\n                }\r\n                break;\r\n            case 'Escape':\r\n                if (this.inputRef.current) {\r\n                    this.inputRef.current.blur();\r\n                }\r\n                break;\r\n        }\r\n    };\r\n\r\n    private onChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n        const value = event.target.value ? event.target.value : '';\r\n        const {onChange} = this.props;\r\n        this.store.setValue(value);\r\n        if (onChange) {\r\n            onChange(value);\r\n        }\r\n    };\r\n\r\n    private renderDisplayList = (displayList: IKeyValue[]) => {\r\n        if (displayList.length > 0) {\r\n            return (<ul className=\"search-view__dropdown-list\">\r\n                {\r\n                displayList.map(({key, value}) => {\r\n                    let liClassNames = 'search-view__li';\r\n                    if (key === this.store.activeItemKey) {\r\n                        liClassNames += ' search-view__li_active';\r\n                    }\r\n                    return <li\r\n                        key={key}\r\n                        onClick={this.onElementClickHandler.bind(this, key)}\r\n                        tabIndex={-1}\r\n                        className={liClassNames}\r\n                        onMouseOver={this.onElementMouseOverHandler.bind(this, key)}\r\n                    >\r\n                        {value}\r\n                    </li>\r\n                })}\r\n            </ul>);\r\n        }\r\n        return null;\r\n    };\r\n\r\n    private onElementMouseOverHandler = (key: string) => {\r\n        this.store.setActiveItemKey(key);\r\n    };\r\n\r\n    private onInputFocusHandler = () => {\r\n        this.store.setShowList(true);\r\n    };\r\n\r\n    private onFocusHandler = () => {\r\n        clearTimeout(this.timeOutId);\r\n    };\r\n\r\n    private onElementClickHandler = (key: string) => {\r\n        this.selectElement(key);\r\n    };\r\n\r\n    private selectElement = (key : string) => {\r\n        transaction(() => {\r\n            this.store.setShowList(false);\r\n            this.store.setValue('');\r\n        });\r\n        const {onListElementSelect} = this.props;\r\n        if (onListElementSelect) {\r\n            onListElementSelect(key);\r\n        }\r\n    };\r\n\r\n    private onBlurHandler = () => {\r\n        this.timeOutId = setTimeout(() => {\r\n            if (this.store.showList) {\r\n                this.store.setShowList(false);\r\n            }\r\n        });\r\n    }\r\n}","import {languageStore} from '../../stores';\r\nimport React from \"react\";\r\nimport {IDictionary} from \"../../type/common.type\";\r\n\r\nexport const LanguageSelect: React.FunctionComponent = () => {\r\n    const {setCurrentLanguage, currentLanguage, dictionary} = languageStore;\r\n    const optionList = Object.entries(dictionary).map(([key]) => {\r\n        return <option value={key} key={key}>{key}</option>\r\n    });\r\n\r\n    return <select\r\n        value={currentLanguage}\r\n        onChange={\r\n            (event) => {\r\n                setCurrentLanguage(event.target.value as keyof IDictionary);\r\n            }\r\n        }\r\n    >\r\n        {optionList}\r\n    </select>\r\n};","import React from 'react';\r\nimport {inject, observer} from \"mobx-react\";\r\nimport {CountryView} from \"../../components\";\r\nimport {langLabel} from '../../utils/langLabel';\r\nimport {ICountryProps} from \"./Country.type\";\r\nimport {SearchView} from \"../../components/SearchView/SearchView\";\r\nimport {LanguageSelect} from '../../components/LanguageSelect/LanguageSelect';\r\nimport './Country.css';\r\n\r\n@inject('countriesStore')\r\n@observer\r\nexport class Country extends React.Component<ICountryProps> {\r\n    public constructor(props: ICountryProps) {\r\n        super(props);\r\n    }\r\n\r\n    public componentDidMount(): void {\r\n        const {getCountryList} = this.props.countriesStore!;\r\n        getCountryList();\r\n    }\r\n\r\n    public render() {\r\n        const {countryList, selectedCountry, setSelectedCountry, isLoad} = this.props.countriesStore!;\r\n        if (!isLoad) {\r\n            return <div style={{paddingTop: '20px'}}>Загрузка</div>;\r\n        }\r\n        return <div className=\"country\">\r\n            <div className=\"country__bar\">\r\n                <div className=\"country__search\">\r\n                    <SearchView\r\n                        list={countryList.map(({name, alpha3Code}) => {return {key: alpha3Code, value: name}})}\r\n                        onListElementSelect={setSelectedCountry}\r\n                        label={langLabel('Search')}\r\n                    />\r\n                </div>\r\n                <div className=\"country__lang\">\r\n                    <LanguageSelect/>\r\n                </div>\r\n            </div>\r\n            <div className=\"country__info\">\r\n                {selectedCountry &&\r\n                <CountryView {...selectedCountry}\r\n                             setSelectedCountry={setSelectedCountry}\r\n                             countryList={countryList}\r\n                />}\r\n            </div>\r\n        </div>;\r\n    }\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport {IAppProps} from \"./App.type.\";\nimport {Country} from \"../Country/Country\";\n\nclass App extends React.Component<IAppProps> {\n  public constructor(props: IAppProps) {\n    super(props);\n  }\n\n  public render = () => {\n    return <main className=\"main-container\">\n      <Country/>\n    </main>\n  };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/app/App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"mobx-react\";\nimport {store} from \"./stores\";\n\nReactDOM.render(\n    <Provider {...store}>\n        <App/>\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}